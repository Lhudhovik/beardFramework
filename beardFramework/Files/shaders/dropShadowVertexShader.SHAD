#version 460
in vec3 pos;

out vec4 color;
out vec4 dist;


uniform vec3 lightPos;
uniform float groundY;
uniform float groundAngle;
uniform mat4 model;
uniform mat4 projection;
uniform mat4 view;
uniform int useModel;

void main()
{
	
	float angle;
	float shadowLength;
	vec4 fragPos;
	vec4 newPosition;
	vec4 center ;
	if(useModel > 0){
		
		fragPos = model * vec4(pos, 1.0);
		center = model * vec4(0.5,0.5,0,1);
		newPosition =model * vec4(pos, 1.0);
	}
	else
	{
		fragPos = vec4(pos,1.0);
		newPosition = vec4(pos,1.0);	
		
	}
	
	
	angle = atan(fragPos.y-lightPos.y, fragPos.x - lightPos.x);
	
	float distFrag = distance(vec2(fragPos.x, fragPos.y), vec2(lightPos.x, lightPos.y));
	float distCent = distance(vec2(center.x, center.y), vec2(lightPos.x, lightPos.y));
	
	
	if(distFrag >= distCent)
	{
			newPosition.x += distFrag * cos(angle);
			newPosition.y += distFrag * sin(angle);
			newPosition.z += 0.5;
	}
	
	distFrag = distance(vec2(newPosition.x, newPosition.y), vec2(lightPos.x, lightPos.y));
	
	color = vec4(0,0,0,100/distFrag);
	
	
	gl_Position = projection * view * newPosition;
}