#version 460
in vec3 pos;

out vec4 color;



uniform int useModel;

uniform float groundY;
uniform float groundAngle;
uniform float shadowLength;

uniform vec2 corner1Pos;
uniform vec2 corner2Pos;

uniform vec3 lightPos;

uniform vec4 shadowColor;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
	float angle;
	vec4 newPosition;

	if(useModel > 0){
		newPosition =model * vec4(pos, 1.0);
	}
	else
	{
		newPosition = vec4(pos,1.0);	
		
	}
	switch(gl_VertexID)
	{
	
		case 0: 
			newPosition.x = corner1Pos.x;
			newPosition.y = corner1Pos.y;
			break;
		
		case 1:
			newPosition.x = corner2Pos.x;
			newPosition.y = corner2Pos.y;
			break;
		case 2:
			angle = atan(corner2Pos.y - lightPos.y, corner2Pos.x-lightPos.x);
			newPosition.x = corner2Pos.x +  shadowLength * cos(angle);
			newPosition.y = corner2Pos.y - shadowLength * sin(angle);
			break;
		
		case 3: 
			angle = atan(corner1Pos.y - lightPos.y, corner1Pos.x-lightPos.x);
			newPosition.x = corner1Pos.x + shadowLength * cos(angle);
			newPosition.y = corner1Pos.y + shadowLength * sin(angle);
			break;
	}

	color = shadowColor;
	
	
	gl_Position = projection * view * newPosition;
	
		
}