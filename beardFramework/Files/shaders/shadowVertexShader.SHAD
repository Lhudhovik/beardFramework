#version 460
in vec3 pos;

out vec4 color;



uniform int useModel;

uniform float groundAngle;
uniform float shadowLength;

uniform vec2 corner1Pos;
uniform vec2 corner2Pos;

uniform vec3 lightPos;

uniform vec4 shadowColor;
uniform vec4 limits;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
	float angle;
	float length;
	vec4 newPosition;

	if(useModel > 0){
		newPosition =model * vec4(pos, 1.0);
	}
	else
	{
		newPosition = vec4(pos,1.0);	
		
	}
		color = shadowColor;

		
	
	switch(gl_VertexID)
	{
	
		case 0: 
			newPosition.x = corner1Pos.x;
			newPosition.y = corner1Pos.y;
			break;
		
		case 1:
			newPosition.x = corner2Pos.x;
			newPosition.y = corner2Pos.y;
			break;
		case 2:
			angle = atan(corner2Pos.y - lightPos.y, corner2Pos.x-lightPos.x);
			length = abs(shadowLength / cos(angle));
			
			newPosition.x = corner2Pos.x +  length * cos(angle);
			newPosition.y = corner2Pos.y + length * sin(angle);
			color.w = 0;
			if(newPosition.y > limits.y){
				newPosition.x +=    (newPosition.y - limits.y) * cos(angle);
				newPosition.y = limits.y;
			}
			else if( newPosition.y < limits.x)
			{
				newPosition.x +=    (limits.x - newPosition.y) * cos(angle);
				newPosition.y = limits.x;
			}
			
			if(newPosition.x < limits.z)
			{
				float dX= limits.z-newPosition.x;	
				
				newPosition.x = limits.z;
				newPosition.y = max(min(newPosition.y  -tan(angle) * dX, limits.y), limits.x);
				
			}
			if(newPosition.x > limits.w)
			{
				float dX= newPosition.x - limits.w;	
				
				newPosition.x = limits.w;
				newPosition.y = max(min(newPosition.y + tan(angle) * dX, limits.y), limits.x);
				
			}
			break;
		
		case 3: 
			angle = atan(corner1Pos.y - lightPos.y, corner1Pos.x-lightPos.x);
			length = abs(shadowLength / cos(angle));
			newPosition.x = corner1Pos.x + length* cos(angle);
			newPosition.y = corner1Pos.y + length * sin(angle);
			color.w = 0;
			if(newPosition.y > limits.y){
				newPosition.x +=    (newPosition.y - limits.y) * cos(angle);
				newPosition.y = limits.y;
			}
			else if( newPosition.y < limits.x)
			{
				newPosition.x +=    (limits.x - newPosition.y) * cos(angle);
				newPosition.y = limits.x;
			}
			
			
			if(newPosition.x < limits.z)
			{
				float dX= limits.z-newPosition.x;	
				
				newPosition.x = limits.z;
				newPosition.y = max(min(newPosition.y - tan(angle) * dX, limits.y), limits.x);
				
			}
			
			if(newPosition.x > limits.w)
			{
				float dX= newPosition.x - limits.w;	
				
				newPosition.x = limits.w;
				newPosition.y = max(min(newPosition.y + tan(angle) * dX, limits.y), limits.x);
				
			}
			
			
			break;
	}

	
	
	
	
	
	gl_Position = projection * view * newPosition;
	
		
}