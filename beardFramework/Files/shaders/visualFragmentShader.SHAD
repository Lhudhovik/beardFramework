#version 460


out vec4 FragColor;

struct ColorComponent{
	sampler2D sampler;
	vec4 uv;
	vec3 color;
};

struct Material{
	ColorComponent diffuse;
	ColorComponent specular;
	float shininess;
	float transparency;
};

struct DirectionalLight {
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	int used;
};

struct PointLight {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	float constant;
	float linear;
	float quadratic;
	int used;
};

struct SpotLight {
    vec3 position;
	vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	float cutOff;
	float outerCutOff;
	float constant;
	float linear;
	float quadratic;
	int used;
};

#define NR_POINT_LIGHTS 10
#define NR_SPOT_LIGHTS 10
#define NR_DIR_LIGHTS 10


in vec3 FragmentPosition;
in vec3 FragmentUV;

uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform SpotLight spotLights[NR_POINT_LIGHTS];
uniform DirectionalLight directionalLights[NR_DIR_LIGHTS]; 
uniform Material material;


vec3 specular;
vec3 diffuse;
vec3 ambient;

void CalculateDirectionalLights(vec3 normal, vec3 viewDirection);
void CalculatePointLights( vec3 normal,vec3 viewDirection, vec3 fragmentPosition);
void CalculateSpotLights(vec3 normal,vec3 viewDirection, vec3 fragmentPosition);

void main()
{
	
	//----------------------------------------------------------------------------------------------------------------------initial setup
	vec3 normal = normalize(vec3(0,0,-1));
	vec3 viewDirection = normalize(vec3(0,0,-1));
	
	vec3 matDiff = vec3(texture(material.diffuse.sampler, vec2(material.diffuse.uv.x + (material.diffuse.uv.z*FragmentUV.x),material.diffuse.uv.y + (material.diffuse.uv.w*FragmentUV.y))))* material.diffuse.color; 
	vec3 matSpec = vec3(texture(material.specular.sampler, vec2(material.specular.uv.x + (material.specular.uv.z*FragmentUV.x),material.specular.uv.y + (material.specular.uv.w*FragmentUV.y)))) * material.specular.color ; 
	
	
	ambient = vec3(0,0,0);
	diffuse = vec3(0,0,0);
	specular = vec3(0,0,0);
	
	//----------------------------------------------------------------------------------------------------------------------directional
    CalculateDirectionalLights( normal, viewDirection);
	
	//----------------------------------------------------------------------------------------------------------------------point lights
	CalculatePointLights(normal, viewDirection, FragmentPosition);

	//----------------------------------------------------------------------------------------------------------------------spot lights
	CalculateSpotLights(normal, viewDirection,FragmentPosition);
		
	//----------------------------------------------------------------------------------------------------------------------result
	
	ambient *= matDiff;
	diffuse *= matDiff;
	specular *= matSpec;
	
	
	FragColor =  vec4((ambient + specular + diffuse), material.transparency);
	
	
	
	
	
} 


void CalculateDirectionalLights(vec3 normal, vec3 viewDirection)
{
	
	vec3 lightDirection;
	vec3 reflectionDirection;
	
	float diff;
	float specularStrength;
	
	DirectionalLight light;
	
	
	for(int i = 0; i < NR_DIR_LIGHTS ; i++)
	{
		light = directionalLights[i];
		
		if(light.used == 0) continue;
			
			//----------------------------------------------------------------------------------------------------------------------initial setup
			lightDirection = normalize(-light.direction);
				
			//----------------------------------------------------------------------------------------------------------------------ambient
			ambient += light.ambient * material.diffuse.color ;
			
			//----------------------------------------------------------------------------------------------------------------------diffuse

			diff = max(dot(normal, lightDirection), 0.0);
			diffuse += diff  * light.diffuse * material.diffuse.color;

			//----------------------------------------------------------------------------------------------------------------------specular
			reflectionDirection = reflect(-lightDirection, normal);
			specularStrength = pow(max(dot(viewDirection, reflectionDirection),0.0),material.shininess);
			
			specular += light.specular * specularStrength;
		
	}
		//----------------------------------------------------------------------------------------------------------------------result
	
	
}

void CalculatePointLights(vec3 normal,vec3 viewDirection, vec3 fragmentPosition)
{
	
	vec3 lightDirection;
	vec3 reflectionDirection;
	
	float distance ;
	float attenuation;
	float diff;
	float specularStrength;
	
	PointLight light;
	
	
	
	for(int i = 0; i < NR_POINT_LIGHTS ; i++)
	{
		light = pointLights[i];
		if(light.used == 0) continue;	
		
		//----------------------------------------------------------------------------------------------------------------------initial setup
		lightDirection = normalize(light.position - fragmentPosition);
		distance = length(light.position - fragmentPosition);
		attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance*distance));
		
		//----------------------------------------------------------------------------------------------------------------------ambient
		ambient += light.ambient  * attenuation  ;
		
		//----------------------------------------------------------------------------------------------------------------------diffuse
		diff = max(dot(normal, lightDirection), 0.0);
		diffuse += diff   * light.diffuse  *  attenuation ;

		//----------------------------------------------------------------------------------------------------------------------specular
		reflectionDirection = reflect(-lightDirection, normal);
		specularStrength = pow(max(dot(viewDirection, reflectionDirection),0.0),material.shininess);
		specular += light.specular * specularStrength * attenuation ;	
	}
	

	
}

void CalculateSpotLights( vec3 normal,vec3 viewDirection, vec3 fragmentPosition)
{
	
	vec3 lightDirection;
	vec3 reflectionDirection;
	
	float theta;
	float epsilon;
	float intensity;
	float diff;
	float specularStrength;
	float distance ;
	float attenuation;
	
	SpotLight light;
	
	for(int i = 0; i < NR_SPOT_LIGHTS ; i++)
	{
		light = spotLights[i];
		if(light.used == 0) continue;	
		
		//----------------------------------------------------------------------------------------------------------------------initial setup
		lightDirection = normalize(light.position - fragmentPosition);
		distance = length(light.position - fragmentPosition);
		attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance*distance));
		
		//----------------------------------------------------------------------------------------------------------------------angle calculations
		theta = dot(lightDirection, normalize(-light.direction));
		epsilon = light.cutOff - light.outerCutOff;
		intensity = clamp((theta - light.outerCutOff)/epsilon, 0.0,1.0);
		
		//----------------------------------------------------------------------------------------------------------------------ambient
		ambient += light.ambient * attenuation * intensity;
		
			
		//----------------------------------------------------------------------------------------------------------------------diffuse
		diff = max(dot(normal, lightDirection), 0.0);
		diffuse += diff   * light.diffuse * intensity * attenuation ;

		//----------------------------------------------------------------------------------------------------------------------specular
		reflectionDirection = reflect(-lightDirection, normal);
		specularStrength = pow(max(dot(viewDirection, reflectionDirection),0.0),material.shininess);
		specular += light.specular * specularStrength * intensity * attenuation ;

	}
	//----------------------------------------------------------------------------------------------------------------------result
	
}